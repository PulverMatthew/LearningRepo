class pokerCard:
    # Valid poker suits
    suits = ['Clubs', 'Spades', 'Hearts', 'Diamonds']
    # Valid poker ranks 
    ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'A', 'J', 'Q', 'K']

    def __init__(self, suit, rank):
        # Defines suits and ranks.
        if suit not in pokerCard.suits:
            raise ValueError(f"Invalid suit: {suit}")
        if rank not in pokerCard.ranks:
            raise ValueError(f"Invalid rank: {rank}")
        self.suit = suit
        self.rank = rank

        # Chip value can be intuited based on rank value. If a face card, set to 10. If ace, set to 11. 
        self.chips = rank
        if str(self.chips) in ('J', 'Q', 'K'):
            self.chips = 10
        elif str(self.chips) in ('A'):
            self.chips = 11
        
        # Set isFace boolean to false by default. If the rank is J, Q, or K, then set isFace to true.
        self.isFace = False
        if str(self.rank) in ('J', 'Q', 'K'):
            self.isFace = True

    # Setter method for suit. 
    def setSuit(self, suit):
        if suit not in pokerCard.suits:
            raise ValueError(f"Invalid suit: {suit}")
        self.suit = suit

    # Setter method for rank. 
    def setRank(self, rank):
        if rank not in pokerCard.ranks:
            raise ValueError(f"Invalid rank: {rank}")
        self.rank = rank
        self.chips = rank
        # If set rank is J, Q, or K, then set chips to 10 
        if str(self.rank) in ('J', 'Q', 'K'):
            self.chips = 10
        # If ace, set chips to 11.
        elif str(self.chip) in ('A'):
            self.chips = 11
        # If J, Q, or K, set isFace boolean to true.
        if str(self.rank) in ('J', 'Q','K'):
            self.isFace = True

    # Setter method for chips.
    def setChips(self, chips):
        self.chips = chips
    
    # Setter method for face card boolean. 
    def setFace(self, faceCard):
        self.faceCard = faceCard

class pokerDeck:
    # Poker deck class will instantiate with a generated list of pokerCards generated by defaultDeck method, as well as the card count.
    def __init__(self):
        self.cardDeck = self.defaultDeck()
        self.cardCount = len(self.cardDeck)

    # Generates a standard deck of poker cards.
    def defaultDeck(self):
        deck = []
        # Generates a pokerCard for every pokerCard.suits and pokerCard.ranks
        for suit in pokerCard.suits:
            for rank in pokerCard.ranks:
                deck.append(pokerCard(suit, rank))
        return deck


# TEST CASES

# Tests individual poker cards
card1 = pokerCard('Hearts', 'A')
card2 = pokerCard('Spades', 10)
card3 = pokerCard('Diamonds', 'J')
card4 = pokerCard('Clubs', 7)
print(card1.suit, card1.rank, card1.chips, card1.isFace)
print(card2.suit, card2.rank, card2.chips, card2.isFace)
print(card3.suit, card3.rank, card3.chips, card3.isFace)
print(card4.suit, card4.rank, card4.chips, card4.isFace)

# Tests poker deck generation.
deck = pokerDeck()
print(deck.cardCount)
for card in deck.cardDeck:
    print(card.suit, card.rank, card.chips, card.isFace)
